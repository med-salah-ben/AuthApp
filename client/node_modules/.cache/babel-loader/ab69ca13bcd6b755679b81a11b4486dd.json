{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN_USER, USER_LOADING, LOGOUT_USER, REGISTER_USER, GET_AUTH_USER, AUTH_ERRORS } from \"../constant/Actions-types\"; //loading user\n\nexport const userLoading = () => dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n}; //register user\n\nexport const registerUser = formData => async dispatch => {\n  dispatch(userLoading());\n\n  try {\n    const res = await axios.post('/api/auth/register', formData);\n    dispatch({\n      type: REGISTER_USER,\n      payload: res.data //{msg,user,token}\n\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: AUTH_ERRORS\n    });\n  }\n}; //login\n\nexport const loginUser = formData => async dispatch => {\n  dispatch(userLoading());\n\n  try {\n    const res = await axios.post('/api/auth/login', formData);\n    dispatch({\n      type: LOGIN_USER,\n      payload: res.data //{msg,user,token}\n\n    });\n  } catch (error) {\n    console.dir(error);\n    const {\n      errors\n    } = error.response.data;\n\n    if (Array.isArray(errors)) {\n      errors.forEach(err => alert(err.msg));\n    }\n\n    dispatch({\n      type: AUTH_ERRORS\n    });\n  }\n}; //get auth user\n\nexport const getAuthUser = () => async dispatch => {\n  dispatch(userLoading());\n\n  try {\n    //headers\n    const config = {\n      headers: {\n        'x-auth-token': localStorage.getItem('token')\n      }\n    };\n    const res = await axios.get('/api/auth/user', config);\n    dispatch({\n      type: GET_AUTH_USER,\n      payload: res.data // {user:req.user}\n\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: AUTH_ERRORS\n    });\n  }\n};\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER\n  });\n};","map":{"version":3,"sources":["C:/Users/slh/OneDrive/Bureau/auth-workshop/client/src/JS/Actions.js/authActions.js"],"names":["axios","LOGIN_USER","USER_LOADING","LOGOUT_USER","REGISTER_USER","GET_AUTH_USER","AUTH_ERRORS","userLoading","dispatch","type","registerUser","formData","res","post","payload","data","error","console","log","loginUser","dir","errors","response","Array","isArray","forEach","err","alert","msg","getAuthUser","config","headers","localStorage","getItem","get","logoutUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,UAAR,EACQC,YADR,EAEQC,WAFR,EAGQC,aAHR,EAIQC,aAJR,EAKQC,WALR,QAK2B,2BAL3B,C,CAMA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAKC,QAAD,IAAY;AACvCA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAACP;AADA,GAAD,CAAR;AAGH,CAJM,C,CAKP;;AACA,OAAO,MAAMQ,YAAY,GAAIC,QAAD,IAAa,MAAMH,QAAN,IAAiB;AACtDA,EAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;;AACA,MAAI;AACA,UAAMK,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,oBAAX,EAAgCF,QAAhC,CAAlB;AACAH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACL,aADA;AAELU,MAAAA,OAAO,EAACF,GAAG,CAACG,IAFP,CAEW;;AAFX,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH;AAAN,KAAD,CAAR;AACH;AACJ,CAZM,C,CAaP;;AACA,OAAO,MAAMa,SAAS,GAAIR,QAAD,IAAa,MAAMH,QAAN,IAAiB;AACnDA,EAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;;AACA,MAAI;AACA,UAAMK,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,iBAAX,EAA6BF,QAA7B,CAAlB;AACAH,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACR,UADA;AAELa,MAAAA,OAAO,EAACF,GAAG,CAACG,IAFP,CAEW;;AAFX,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACG,GAAR,CAAYJ,KAAZ;AACA,UAAM;AAACK,MAAAA;AAAD,QAAUL,KAAK,CAACM,QAAN,CAAeP,IAA/B;;AACA,QAAGQ,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAH,EAAyB;AACrBA,MAAAA,MAAM,CAACI,OAAP,CAAgBC,GAAD,IAAOC,KAAK,CAACD,GAAG,CAACE,GAAL,CAA3B;AACH;;AACDpB,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH;AAAN,KAAD,CAAR;AACH;AACJ,CAhBM,C,CAkBP;;AACA,OAAO,MAAMuB,WAAW,GAAG,MAAI,MAAMrB,QAAN,IAAiB;AAC5CA,EAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;;AACD,MAAI;AACA;AACA,UAAMuB,MAAM,GAAE;AACVC,MAAAA,OAAO,EAAG;AACN,wBAAeC,YAAY,CAACC,OAAb,CAAqB,OAArB;AADT;AADA,KAAd;AAKH,UAAMrB,GAAG,GAAG,MAAMZ,KAAK,CAACkC,GAAN,CAAU,gBAAV,EAA2BJ,MAA3B,CAAlB;AACAtB,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACJ,aADA;AAELS,MAAAA,OAAO,EAACF,GAAG,CAACG,IAFP,CAEY;;AAFZ,KAAD,CAAR;AAIA,GAZD,CAYE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACH;AAAN,KAAD,CAAR;AACA;AACH,CAlBM;AAoBP,OAAO,MAAM6B,UAAU,GAAG,MAAO3B,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAACN;AADA,GAAD,CAAR;AAGH,CAJM","sourcesContent":["import axios from \"axios\"\r\n\r\nimport {LOGIN_USER,\r\n        USER_LOADING,\r\n        LOGOUT_USER,\r\n        REGISTER_USER,\r\n        GET_AUTH_USER,\r\n        AUTH_ERRORS}  from \"../constant/Actions-types\"\r\n//loading user\r\nexport const userLoading = ()=>(dispatch)=>{\r\n    dispatch({\r\n        type:USER_LOADING\r\n    })\r\n}\r\n//register user\r\nexport const registerUser = (formData) =>async(dispatch)=>{\r\n    dispatch(userLoading())\r\n    try {\r\n        const res = await axios.post('/api/auth/register',formData)\r\n        dispatch({\r\n            type:REGISTER_USER,\r\n            payload:res.data//{msg,user,token}\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch({type:AUTH_ERRORS})\r\n    }\r\n}\r\n//login\r\nexport const loginUser = (formData) =>async(dispatch)=>{\r\n    dispatch(userLoading())\r\n    try {\r\n        const res = await axios.post('/api/auth/login',formData)\r\n        dispatch({\r\n            type:LOGIN_USER,\r\n            payload:res.data//{msg,user,token}\r\n        })\r\n    } catch (error) {\r\n        console.dir(error)  \r\n        const {errors}= error.response.data\r\n        if(Array.isArray(errors)){\r\n            errors.forEach((err)=>alert(err.msg))\r\n        }\r\n        dispatch({type:AUTH_ERRORS})\r\n    }\r\n}\r\n\r\n//get auth user\r\nexport const getAuthUser = ()=>async(dispatch)=>{\r\n    dispatch(userLoading())\r\n   try {\r\n       //headers\r\n       const config ={\r\n           headers : {\r\n               'x-auth-token':localStorage.getItem('token')\r\n           }\r\n       }\r\n    const res = await axios.get('/api/auth/user',config)\r\n    dispatch({\r\n        type:GET_AUTH_USER,\r\n        payload:res.data // {user:req.user}\r\n    })\r\n   } catch (error) {\r\n    console.log(error)\r\n    dispatch({type:AUTH_ERRORS})\r\n   }\r\n}\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n    dispatch({\r\n        type:LOGOUT_USER\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}